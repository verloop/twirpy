package templates

import "text/template"

type TwirpTemplateVariables struct {
	FileName string
	Imports  []*TwirpImport
	Services []*TwirpService
}

type TwirpService struct {
	ServiceURL string
	Name       string
	Comment    string
	Methods    []*TwirpMethod
}

type TwirpMethod struct {
	ServiceURL string
	Name       string
	Comment    string
	Input      string
	Output     string
}

type TwirpImport struct {
	From   string
	Import string
}

// TwirpTemplate - Template for twirp server and client
var TwirpTemplate = template.Must(template.New("TwirpTemplate").Parse(`# -*- coding: utf-8 -*-
# Generated by https://github.com/verloop/protoc-gen-python-verloop.  DO NOT EDIT!
# source: {{.FileName}}

from vtwirp.base import Endpoint
from vtwirp.server import TwirpServer
from vtwirp.client import TwirpClient

{{range .Imports}}from {{.From}} import {{.Import}}
{{end}}
{{range .Services}}
class {{.Name}}Server(TwirpServer):

	def __init__(self, *args, service):
		super().__init__(service=service)
		self._prefix = "/twirp/{{.ServiceURL}}"
		self._endpoints = { {{- range .Methods }}
			"{{.Name}}": Endpoint(
				name="{{.Name}}",
				function=getattr(service, "{{.Name}}"),
				input={{.Input}},
				output={{.Output}},
			),{{- end }}
		}

class {{.Name}}Client(TwirpClient):
{{range .Methods}}
	def {{.Name}}(self, *args, ctx, request, **kwargs):
		return self._make_request(
			url="/twirp/{{.ServiceURL}}/{{.Name}}",
			ctx=ctx,
			request=request, 
			response_obj={{.Output}},
			**kwargs,
		)
{{end}}{{end}}`))
